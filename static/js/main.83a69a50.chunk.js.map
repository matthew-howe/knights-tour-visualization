{"version":3,"sources":["store/board.js","utils/utils.js","algorithms/backtracking.js","algorithms/warnsdorff.js","components/Board.js","App.js","serviceWorker.js","store/algorithm.js","store/index.js","index.js"],"names":["initialState","knight","board","iterations","util","pos","filter","move","moves","length","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","count","this","findMoves","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","validMove","err","return","backtrack","_x","_x2","_x3","_x4","_x5","_backtrack","apply","arguments","_callee2","updateBoard","moveKnight","speed","regenerator_default","a","wrap","_context2","prev","setTimeout","Object","asyncToGenerator","mark","_callee","curBoard","lastMove","possibleMoves","moveIdx","curMove","row","column","_context","boardVisited","abrupt","shuffle","push","pop","stop","warnsdorf","_warnsdorf","bestMove","bestCount","Infinity","console","log","numOfEmpty","t0","finish","alert","Board","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","iter","bind","assertThisInitialized","warnsdorff","e","setState","target","i","visited","x","y","black","props","react_default","createElement","key","className","_this2","squares","renderSquare","id","alt","src","href","onClick","name","onChange","handleChange","type","min","max","Component","connect","dispatch","newBoard","App","components_Board","Boolean","window","location","hostname","match","script","temp","reducer","combineReducers","action","assign","algorithm","newSpeed","newTemp","middleware","composeWithDevTools","applyMiddleware","createLogger","collapsed","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83a69a50.chunk.js","sourcesContent":["const MOVE_KNIGHT = \"MOVE_KNIGHT\"\nconst UPDATE_BOARD = \"UPDATE_BOARD\"\nconst FAILURE = \"FAILURE\"\nconst RUN_SCRIPT = \"RUN_SCRIPT\"\n\nexport const moveKnight = (knight) => ({\n  type: MOVE_KNIGHT,\n  knight: knight\n})\n\nexport const updateBoard = (board) => ({\n  type: UPDATE_BOARD,\n  board: board\n})\n\nexport const failure = () => ({\n  type: FAILURE,\n})\n\nexport const runScript = () => ({\n  type: RUN_SCRIPT,\n})\n\nconst initialState = {\n  knight: [0, 0],\n  board: [\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  ],\n  iterations: 0\n}\n\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case MOVE_KNIGHT:\n      return Object.assign({}, state, {knight: [action.knight[1], action.knight[0]]})\n    case UPDATE_BOARD:\n      return Object.assign({}, state, {board: action.board})\n    case FAILURE:\n      alert(\"Failed to converge on a correct solution. Try again.\")\n      break;\n    case RUN_SCRIPT:\n      return initialState // reset the board\n    default:\n      console.log(\"Switch function error in board store\")\n      return initialState\n  }\n}\n\n\n\n\n\n\n","class utils {\n\n    findMoves(pos) {\n        // findmoves takes the [x, y] coordinates\n        // of the knight and returns an array of valid\n        // positions for the knight to move\n\n        let movesArr = [\n            [pos[0] - 1, pos[1] - 2],\n            [pos[0] - 2, pos[1] - 1],\n            [pos[0] + 1, pos[1] - 2],\n            [pos[0] + 2, pos[1] - 1],\n            [pos[0] - 2, pos[1] + 1],\n            [pos[0] - 1, pos[1] + 2],\n            [pos[0] + 1, pos[1] + 2],\n            [pos[0] + 2, pos[1] + 1],\n        ];\n        let posMoves = movesArr.filter(move => {\n            return move[0] >= 0 && move[1] >= 0 && move[0] < 8 && move[1] < 8;\n        });\n        return posMoves;\n    }\n\n    \n    validMove(board, pos) {\n        // validmove checks if the target square \n        // hasn't been visited yet\n        return board[pos[0]][pos[1]] !== 1;\n    }\n\n        \n    boardVisited(moves) {\n        // checks if every square has been visited\n        return moves.length === 63;\n    }\n\n\n    shuffle(array) {\n        // shuffling utility\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    numOfEmpty( board, pos ) {\n        let count = 0;\n        let moves = this.findMoves(pos); \n\n        for (const move of moves) {\n            if (this.validMove(board, move)) count++;\n        }\n\n        return count;\n    }\n}\n\nlet util = new utils();\nexport default util;\n","import util from '../utils/utils';\n\nexport default async function backtrack(board, moves, updateBoard, moveKnight, speed) {\n    await setTimeout(async () => {\n        let curBoard = board; \n        curBoard[0][0] = 1; // <- remove later\n\n        \n      if (util.boardVisited(moves)) {\n          return true; // break case\n      }\n\n      // get the current position of the knight and the\n      // possible moves for it to make\n      const lastMove = moves[moves.length - 1];\n      let possibleMoves = util.findMoves(lastMove);\n      possibleMoves = util.shuffle(possibleMoves);\n\n\n    // for each possible move check if its a valid move\n    // if it is, make that move\n      for (let moveIdx = 0; moveIdx < possibleMoves.length; moveIdx++) {\n        const curMove = possibleMoves[moveIdx];\n        if (util.validMove(curBoard, curMove)) {\n          moves.push(curMove);\n          let row = curMove[0];\n          let column = curMove[1];\n\n          curBoard[row][column] = 1;\n\n          moveKnight(curMove);\n          updateBoard(curBoard);\n          if (backtrack(curBoard, moves, updateBoard, moveKnight)) {\n            return true;\n          }\n\n          moves.pop();\n          curBoard[curMove[0]][curMove[1]] = 0;\n          moveKnight(moves[moves.length - 1]);\n          updateBoard(curBoard);\n        }\n      }\n\n      curBoard[lastMove[0]][lastMove[1]] = 0;\n      moves.pop();\n\n      moveKnight(moves[moves.length - 2]);\n      updateBoard(curBoard);\n      backtrack(curBoard, moves, updateBoard, moveKnight);\n    }, 100);\n  }\n","import util from '../utils/utils';\n\nexport default async function warnsdorf(board, moves, updateBoard, moveKnight, speed) {\n    await setTimeout(async () => {\n        let curBoard = board; \n\n        if (util.boardVisited(moves)) return true;\n\n\n        // get the current position of the knight and the\n        // possible moves for it to make\n        const lastMove = moves[moves.length - 1];\n        let possibleMoves = util.findMoves(lastMove);\n\n        // find the move with the most empty spaces\n        let bestMove;\n        let bestCount = Infinity;\n        console.log(possibleMoves)\n        for (const move of possibleMoves) {\n            const count = util.numOfEmpty( curBoard, move);\n            if (count < bestCount && util.validMove( curBoard, move)) {\n                bestCount = count;\n                bestMove = move;\n            }\n        }\n\n        // move the knight and update the board\n        if (bestMove[0] !== undefined && bestMove[1] !== undefined) {\n            moves.push(bestMove);\n            let row = bestMove[0];\n            let column = bestMove[1];\n            curBoard[row][column] = 1;\n            moveKnight(bestMove);\n            updateBoard(curBoard);\n        } else {\n            alert('failed to converge on correct solution!')\n            return false;\n        }\n\n        if (warnsdorf(curBoard, moves, updateBoard, moveKnight)) {\n            return true;\n        }\n\n        return false;\n    }, 100);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { moveKnight, updateBoard } from '../store/board';\nimport backtrack from '../algorithms/backtracking';\nimport warnsdorff from '../algorithms/warnsdorff';\n\nclass Board extends Component {\n  constructor() {\n    super();\n    this.state = {\n      iter: 0,\n      speed: 100,\n    };\n\n    this.backtrack = backtrack.bind(this);\n    this.warnsdorff = warnsdorff.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ speed: e.target.value });\n  }\n\n  renderSquare(i) {\n    let x = i % 8;\n    let y = Math.floor(i / 8);\n    let black = (x + y) % 2 === 1;\n    let knight;\n    let visited;\n    if (this.props.knight) {\n      knight = this.props.knight[0] === x && this.props.knight[1] === y;\n    }\n    if (this.props.board) {\n      visited = this.props.board[y][x] === 1;\n    }\n\n    return knight ? (\n      black ? (\n        <div key={i} className=\"black square knight\" />\n      ) : (\n        <div key={i} className=\"white square knight\" />\n      )\n    ) : black ? (\n      visited ? (\n        <div key={i} className=\"black square visited\" />\n      ) : (\n        <div key={i} className=\"black square\" />\n      )\n    ) : visited ? (\n      <div key={i} className=\"white square visited\" />\n    ) : (\n      <div key={i} className=\"white square\" />\n    );\n  }\n\n  render() {\n    let squares = [];\n\n    for (let i = 0; i < 64; i++) {\n      squares.push(this.renderSquare(i));\n    }\n    return (\n      <div id=\"main\" >\n          <div id=\"img\">\n              <img className=\"img\" alt=\"knight\" src=\"https://i.imgur.com/rDN4qFr.jpg\" />\n          </div>\n          <div className=\"middle\">\n      <div id=\"title\">\n        <h1>Knight's Tour</h1>\n        <p>By <a href=\"http://matthewhowe.net\">Matthew Howe</a></p>\n      </div>\n        <div id=\"board\">{squares}</div>\n    </div>\n        <div id=\"buttons\">\n          <button\n            onClick={() =>\n              this.backtrack(\n                this.props.board,\n                [[0, 0]],\n                this.props.updateBoard,\n                this.props.moveKnight,\n                this.state.speed\n              )\n            }\n            id=\"b4\"\n          >\n            Brute Force Iterations\n          </button>\n          <button\n            onClick={() =>\n              this.warnsdorff(\n                this.props.board,\n                [[0, 0]],\n                this.props.updateBoard,\n                this.props.moveKnight,\n                this.state.speed\n              )\n            }\n            id=\"b3\"\n          >\n            Warnsdorf's Algorithm\n          </button>\n          <button\n            onClick={() =>\n              this.warnsdorff(\n                this.props.board,\n                [[0, 0]],\n                this.props.updateBoard,\n                this.props.moveKnight\n              )\n            }\n            id=\"b3\"\n          >\n            Divide and Conquer\n          </button>\n          <button\n            onClick={() =>\n              this.warnsdorff(\n                this.props.board,\n                [[0, 0]],\n                this.props.updateBoard,\n                this.props.moveKnight\n              )\n            }\n            id=\"b3\"\n          >\n              Neural Network Algorithm\n          </button>\n          <div />\n          <div>\n            <p className=\"speed-text\">Speed: {this.state.speed} ms</p>\n            <input\n              name=\"speed\"\n              onChange={e => {\n                this.handleChange(e);\n              }}\n              type=\"range\"\n              min=\"10\"\n              max=\"500\"\n              value={this.state.speed}\n              className=\"slider\"\n            />\n          </div>\n          <p className=\"iterations\">Iterations: {this.state.iter}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapState = state => ({\n  board: state.board.board,\n  knight: state.board.knight,\n  iterations: state.board.iterations,\n});\n\nconst mapDispatch = dispatch => ({\n  moveKnight: knight => dispatch(moveKnight(knight)),\n  updateBoard: newBoard => dispatch(updateBoard(newBoard)),\n});\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Board);\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n\n    <div className='app'>\n      <div>\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const RUN_SCRIPT = \"RUN_SCRIPT\"\nconst CHANGE_SPEED = \"CHANGE_SPEED\"\nconst MODULATE_SPEED = \"MODULATE_SPEED\"\nconst UPDATE_TEMP = \"UPDATE_TEMP\"\n\nexport const runScript = script => ({\n  type: RUN_SCRIPT,\n  script: script\n})\n\nexport const changeSpeed = newSpeed => ({\n  type: CHANGE_SPEED,\n  newSpeed: newSpeed\n})\n\nexport const modulateSpeed = newSpeed => ({\n  type: MODULATE_SPEED,\n  newSpeed: newSpeed\n})\n\nexport const updateTemp = newTemp => ({\n  type: UPDATE_TEMP,\n  newTemp: newTemp\n})\n\nconst initialState = {\n  script: null,\n  speed: 125,\n  temp: null\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"RUN_SCRIPT\":\n      return Object.assign({}, state, {script: action.script})\n    case \"CHANGE_SPEED\":\n      return Object.assign({}, state, {speed: action.newSpeed})\n    case \"MODULATE_SPEED\":\n      return Object.assign({}, state, {speed: action.newSpeed})\n    case \"UPDATE_TEMP\":\n      return Object.assign({}, state, {temp: action.newTemp})\n    default:\n      return initialState\n  }\n}\n  \n","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport board from './board'\nimport algorithm from './algorithm'\n\nconst reducer = combineReducers({board, algorithm})\nconst middleware = composeWithDevTools(\n  applyMiddleware(createLogger({collapsed: true}))\n)\nconst store = createStore(reducer, middleware)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}