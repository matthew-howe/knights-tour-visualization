{"version":3,"sources":["queue/action-queue.tsx","store/board.js","utils/utils.tsx","algorithms/warnsdorf.tsx","algorithms/divideandconquer.tsx","components/Square.js","algorithms/warnsdorf-anime.tsx","components/Board.js","App.tsx","serviceWorker.tsx","store/index.js","index.js"],"names":["queue","interval","lastTick","tickInterval","actionQueue","fn","push","shift","setImmediate","speed","setInterval","this","processQueue","eraseTicker","clearInterval","initInterval","clearQueueInterval","Date","now","initTickInterval","tick","bind","initialState","knight","moves","curMove","lastMove","board","iterations","timeout","util","pos","filter","move","length","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","count","findMoves","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","validMove","err","return","num","warnsdorf","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","updateBoard","moveKnight","addMove","iterate","updateCurmove","updateLastmove","curBoard","curMoves","i","possibleMoves","bestMove","bestCount","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_move","row","column","wrap","_context","prev","slice","t0","finish","abrupt","Infinity","numOfEmpty","t1","enqueue","alert","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","getNextPoint","x","y","lastX","lastY","nextX","nextY","offsetTypeOriginArr","offsetTypeSubstituteArr","offsetDirArr","_getPossibleNextPoint3","_getPossibleNextPoint","_getPointGridAttribut","blkChoiceX","blkChoiceY","gridSizeX","gridSizeY","gridLocX","gridLocY","pointAttribute","halve","mod_","left","right","getPointGridAttribute","_getPointGridAttribut2","slicedToArray","shouldReverse","t","p","next_a_offsetType","next_b_offsetType","pathOrigin","pathSubstitute","console","log","getPossibleNextPointOffsetType","_getPossibleNextPoint2","p_a","p_b","getPossibleNextPoint","_getPossibleNextPoint4","next_a_x_p","next_a_y_p","next_b_x_p","next_b_y_p","divideandconquer","curmove","lastmove","reset","visited","nextmove","_x9","_x10","Square","props","react_default","createElement","className","styling","key","serial","warnsdorfAnime","clear","startQueueing","_loop","_i","_board","newBoard","newKnight","Board","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","start","assertThisInitialized","e","modulateSpeed","target","changeSpeed","setState","algo","resetIterations","resetMoves","firstMove","black","components_Square","_this2","squares","renderSquare","id","href","onClick","run","name","onChange","handleChange","type","min","max","Component","connect","dispatch","runScript","App","components_Board","Boolean","window","location","hostname","match","reducer","combineReducers","action","assign","concat","toConsumableArray","middleware","composeWithDevTools","applyMiddleware","createLogger","collapsed","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.903af454.chunk.js","sourcesContent":["let queue: any = []\r\nlet interval: any = null\r\nlet lastTick: any = null\r\nlet tickInterval: any = null\r\n\r\nclass ActionQueue {\r\n\r\n\tgetQueue() {\r\n\t\treturn queue;\r\n\t}\r\n\r\n\tenqueue(fn: any) {\r\n\t\tqueue.push(fn);\r\n\t}\r\n\t\r\n\tprocessQueue() {\r\n\t\tlet fn = queue.shift();\r\n\t\tif (fn) setImmediate(fn);\r\n\t}\r\n\r\n\tinitInterval(speed: any) {\r\n\t\tinterval = setInterval(this.processQueue, speed);\r\n\t\tthis.eraseTicker();\r\n\t}\r\n\r\n\teraseTicker() {\r\n\t\tlastTick = null;\r\n\t\tclearInterval(tickInterval);\r\n\t\ttickInterval = null;\r\n\t}\r\n\t\r\n\tstartQueueing(speed: any) {\r\n\t\tthis.initInterval(speed);\r\n\t\tthis.processQueue();\r\n\t}\r\n\t\r\n\tclearQueueInterval() {\r\n\t\tclearInterval(interval);\r\n\t\tinterval = null\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.clearQueueInterval();\r\n\t\tqueue = [];\r\n\t}\r\n\r\n\tmodulateSpeed(speed: any) {\r\n\t\tlastTick = lastTick || Date.now();\r\n\t\tclearInterval(tickInterval);\r\n\t\tthis.initTickInterval(speed);\r\n\t}\r\n\r\n\tinitTickInterval(speed: any) {\r\n\t\ttickInterval = setInterval(this.tick.bind(null, speed), 1);\r\n\t}\r\n\r\n\ttick(speed: any) {\r\n\t\tconst elapsedTime = Date.now() - lastTick;\r\n\t\tlastTick = Date.now();\r\n\t\tthis.processQueue();\r\n\t}\r\n\t\t\r\n\tchangeSpeed(speed: any) {\r\n\t\tthis.clearQueueInterval();\r\n\t\tthis.eraseTicker();\r\n\t\tthis.initInterval(speed);\r\n\t}\t\r\n\t\r\n}\r\n\r\n\r\nconst actionQueue = new ActionQueue()\r\nexport default actionQueue;\r\n","const MOVE_KNIGHT = 'MOVE_KNIGHT';\r\nconst UPDATE_BOARD = 'UPDATE_BOARD';\r\nconst FAILURE = 'FAILURE';\r\nconst RUN_SCRIPT = 'RUN_SCRIPT';\r\nconst STOP_SCRIPT = 'STOP_SCRIPT';\r\nconst CHANGE_SPEED = 'CHANGE_SPEED';\r\nconst CHANGE_SCRIPT = 'CHANGE_SCRIPT';\r\nconst CHANGE_SIZE = 'CHANGE_SIZE';\r\nconst ADD_MOVE = 'ADD_MOVE';\r\nconst UPDATE_CURMOVE = 'UPDATE_CURMOVE';\r\nconst UPDATE_LASTMOVE = 'UPDATE_LASTMOVE';\r\nconst ITERATE = 'ITERATE';\r\nconst RESET_MOVES = 'RESET_MOVES';\r\nconst RESET_ITERATIONS = 'RESET_ITERATIONS';\r\nconst RESET = 'RESET'\r\n\r\nexport const moveKnight = knight => ({\r\n  type: MOVE_KNIGHT,\r\n  knight: knight,\r\n});\r\n\r\nexport const updateBoard = board => ({\r\n  type: UPDATE_BOARD,\r\n  board: board,\r\n});\r\n\r\nexport const failure = () => ({\r\n  type: FAILURE,\r\n});\r\n\r\nexport const stopScript = () => ({\r\n  type: STOP_SCRIPT,\r\n});\r\n\r\nexport const runScript = () => ({\r\n\ttype: RUN_SCRIPT\r\n});\r\n\r\nexport const changeScript = (script) => ({\r\n\ttype: CHANGE_SCRIPT,\r\n\tscript\r\n});\r\n\r\nexport const changeSize = (size) => ({\r\n\ttype: CHANGE_SIZE,\r\n\tsize\r\n});\r\n\r\nexport const addMove = (move) => ({\r\n\ttype: ADD_MOVE,\r\n\tmove\r\n});\r\n\r\nexport const changeSpeed = speed => ({\r\n\t\ttype: CHANGE_SPEED,\r\n\t\tspeed\r\n})\r\n\r\nexport const updateCurmove = (move) => ({\r\n\ttype: UPDATE_CURMOVE,\r\n\tmove\r\n})\r\n\r\nexport const updateLastmove = (move) => ({\r\n\ttype: UPDATE_LASTMOVE,\r\n\tmove\r\n})\r\n\r\nexport const iterate = () => ({\r\n\ttype: ITERATE\r\n})\r\n\r\nexport const modulateSpeed = speed => ({\r\n\t\ttype: modulateSpeed,\r\n\t\tspeed\r\n})\r\n\r\nexport const resetMoves = () => ({\r\n  type: RESET_MOVES,\r\n});\r\n\r\nexport const resetIterations = () => ({\r\n  type: RESET_ITERATIONS,\r\n});\r\n\r\nexport const reset = () => ({\r\n  type: RESET,\r\n})\r\n\r\nconst initialState = {\r\n  knight: [0, 0],\r\n  moves: [[0,0]],\r\n  curMove: [0, 2],\r\n  lastMove: [1, 0],\r\n  board: [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ],\r\n  iterations: 0,\r\n  timeout: {},\r\n  speed: 80,\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n\t\tcase CHANGE_SPEED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tspeed: action.speed\r\n\t\t\t})\r\n    case MOVE_KNIGHT:\r\n      return Object.assign({}, state, {\r\n        knight: [action.knight[1], action.knight[0]],\r\n      });\r\n\r\n    case UPDATE_BOARD:\r\n      return Object.assign({}, state, {board: action.board});\r\n\r\n    case FAILURE:\r\n      alert('Failed to converge on a correct solution. Try again.');\r\n      break;\r\n\r\n    case RUN_SCRIPT:\r\n\r\n      return state;\r\n\r\n    case STOP_SCRIPT:\r\n\r\n      return state;\r\n\r\n\t\tcase ITERATE:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\titerations: state.iterations + 1\r\n\t\t\t});\r\n\t\t\t\r\n\t\tcase ADD_MOVE:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tmoves: [...state.moves, action.move]\r\n\t\t\t});\r\n\t\t\t\r\n\t\tcase UPDATE_CURMOVE:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tcurMove: action.move\r\n\t\t\t});\r\n\t\tcase UPDATE_LASTMOVE:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tlastMove: action.move\r\n\t\t\t});\r\n    case RESET_MOVES:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tmoves: [state.moves[state.moves.length - 1].slice()]\r\n\t\t\t});\r\n    case RESET_ITERATIONS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\titerations: 0\r\n\t\t\t});\r\n    case RESET:\r\n      return initialState;\r\n    default:\r\n      return initialState;\r\n  }\r\n}\r\n","class utils {\r\n\r\n    findMoves(pos: any) {\r\n        // findmoves takes the [x, y] coordinates\r\n        // of the knight and returns an array of valid\r\n        // positions for the knight to move\r\n\r\n        let movesArr = [\r\n            [pos[0] - 1, pos[1] - 2],\r\n            [pos[0] - 2, pos[1] - 1],\r\n            [pos[0] + 1, pos[1] - 2],\r\n            [pos[0] + 2, pos[1] - 1],\r\n            [pos[0] - 2, pos[1] + 1],\r\n            [pos[0] - 1, pos[1] + 2],\r\n            [pos[0] + 1, pos[1] + 2],\r\n            [pos[0] + 2, pos[1] + 1],\r\n        ];\r\n        let posMoves = movesArr.filter(move => {\r\n            return move[0] >= 0 && move[1] >= 0 && move[0] < 12 && move[1] < 12;\r\n        });\r\n        return posMoves;\r\n    }\r\n\r\n    \r\n    validMove(board: any, pos: any) {\r\n        // validmove checks if the target square \r\n        // hasn't been visited yet\r\n        return board[pos[0]][pos[1]] !== 1;\r\n    }\r\n\r\n        \r\n    boardVisited(moves: any) {\r\n        // checks if every square has been visited\r\n        return moves.length === 143;\r\n    }\r\n\r\n    boardVisitedWarnsdorf(moves: any) {\r\n        // adjusted for warnsdorf's moves length\r\n        return moves.length === 143;\r\n    }\r\n\r\n\r\n    shuffle(array: any) {\r\n        // shuffling utility\r\n        var currentIndex = array.length,\r\n            temporaryValue,\r\n            randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    numOfEmpty( board: any, pos: any ) {\r\n        let count = 0;\r\n        let moves = this.findMoves(pos); \r\n\r\n        for (const move of moves) {\r\n            if (this.validMove(board, move)) count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    mapNumToCoords(num: any) {\r\n        let y = Math.floor(num / 12);\r\n        let x = num % 12;\r\n        return [x, y]\r\n    }\r\n\r\n}\r\n\r\nlet util = new utils();\r\nexport default util;\r\n","import util from '../utils/utils';\r\nimport actionQueue from '../queue/action-queue';\r\n\r\n// @param {array[][]} board - 2d array of the board\r\n// @param {array[][] moves - 2d array of the moves so far\r\n// @param {object{}} updateBoard - function to update board state\r\n// @param {object{}} moveKnight - function to update knight state\r\nconst warnsdorf = async (\r\n  board: any,\r\n  moves: any,\r\n  updateBoard: any,\r\n  moveKnight: any,\r\n  addMove: any,\r\n  iterate: any,\r\n  updateCurmove: any,\r\n  updateLastmove: any,\r\n) => {\r\n  let curBoard: number[][] = [];\r\n  let curMoves: number[][] = [];\r\n  for (let i = 0; i < 12; i++) {\r\n    curBoard[i] = board[i].slice();\r\n  }\r\n  for (const move of moves) curMoves.push(move.slice());\r\n\r\n  if (curMoves.length === 144) {\r\n    return true;\r\n  }\r\n\r\n  const lastMove = curMoves[curMoves.length - 1];\r\n  if (curBoard[lastMove[0]][lastMove[1]] === 0) {\r\n    curBoard[lastMove[0]][lastMove[1]] = 1;\r\n  }\r\n\r\n  let possibleMoves = util.findMoves(lastMove);\r\n  // find the move with the most empty spaces\r\n  let bestMove: number[] = [0, 0];\r\n  let bestCount = Infinity;\r\n  for (const move of possibleMoves) {\r\n    const count = util.numOfEmpty(curBoard, move);\r\n    if (count < bestCount && util.validMove(curBoard, move)) {\r\n      bestCount = count;\r\n      bestMove = move;\r\n    }\r\n  }\r\n\r\n  // move the knight and update the board\r\n  if (bestMove[0] !== undefined && bestMove[1] !== undefined) {\r\n    let row = bestMove[0];\r\n    let column = bestMove[1];\r\n\r\n    // enqueue actions\r\n    actionQueue.enqueue(() => {\r\n      addMove(bestMove);\r\n      moveKnight(bestMove);\r\n      updateBoard(curBoard);\r\n      iterate();\r\n      updateCurmove(bestMove)\r\n      updateLastmove(lastMove)\r\n    });\r\n\r\n    curBoard[row][column] = 1;\r\n    curMoves.push(bestMove);\r\n\r\n    if (\r\n      warnsdorf(\r\n        curBoard,\r\n        curMoves,\r\n        updateBoard,\r\n        moveKnight,\r\n        addMove,\r\n        iterate,\r\n        updateCurmove,\r\n        updateLastmove,\r\n      )\r\n    ) {\r\n      return true;\r\n    } else return false;\r\n  } else {\r\n    alert('failed to converge on correct solution!');\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default warnsdorf;\r\n","import actionQueue from '../queue/action-queue';\r\n\r\n// returns the coordinates of the next move as an array [x, y]\r\n// @param {integer} x - x position of knight\r\n// @param {integer} y - y position of knight\r\n// @param {integer} lastX - last x position of knight\r\n// @param {integer} lastY - last y position of knight\r\nfunction getNextPoint(x: number, y: number, lastX: number, lastY: number) {\r\n  const offsetTypeOriginArr = [3, 7, 6, 2, 7, 3, 2, 6];\r\n  const offsetTypeSubstituteArr = [4, 3, 7, 4, 0, 7, 3, 0];\r\n  const offsetDirArr = [\r\n    [-2, -1],\r\n    [-1, -2],\r\n    [1, -2],\r\n    [2, -1],\r\n    [2, 1],\r\n    [1, 2],\r\n    [-1, 2],\r\n    [-2, 1],\r\n  ];\r\n\r\n  // returns [gridSizeX, gridSizeY, gridLocX, gridLocY, pointAttribute]\r\n  // @param {integer} x - x position of the knight\r\n  // @param {integer} y - y position of the knight\r\n  function getPointGridAttribute(x: number, y: number) {\r\n    let gridSizeX = 12;\r\n    let gridSizeY = 12;\r\n    let gridLocX = x;\r\n    let gridLocY = y;\r\n    let blkChoiceX, blkChoiceY;\r\n\r\n    let pointAttribute = 8;\r\n\r\n    do {\r\n      /* process x  */\r\n\r\n      let halve = gridSizeX / 2;\r\n      let mod_ = halve % 2;\r\n      let left = halve - mod_;\r\n      let right = halve + mod_;\r\n\r\n      if (gridLocX < left) {\r\n        gridSizeX = left;\r\n        blkChoiceX = 1;\r\n      } else {\r\n        gridSizeX = right;\r\n        gridLocX -= right;\r\n        blkChoiceX = 2;\r\n      }\r\n\r\n      /* process y */\r\n      halve = gridSizeY / 2;\r\n      mod_ = halve % 2;\r\n      left = halve - mod_;\r\n      right = halve + mod_;\r\n\r\n      if (gridLocY < left) {\r\n        gridSizeY = left;\r\n        blkChoiceY = 1;\r\n      } else {\r\n        gridSizeY = right;\r\n        gridLocY -= left;\r\n        blkChoiceY = 2;\r\n      }\r\n\r\n      pointAttribute =\r\n        blkChoiceX === 1 &&\r\n        blkChoiceY === 1 &&\r\n        gridLocX === gridSizeX - 3 &&\r\n        gridLocY === gridSizeY - 1\r\n          ? 0\r\n          : blkChoiceX === 1 &&\r\n            blkChoiceY === 1 &&\r\n            gridLocX === gridSizeX - 1 &&\r\n            gridLocY === gridSizeY - 2\r\n          ? 1\r\n          : blkChoiceX === 2 &&\r\n            blkChoiceY === 1 &&\r\n            gridLocX === 1 &&\r\n            gridLocY === gridSizeY - 3\r\n          ? 2\r\n          : blkChoiceX === 2 &&\r\n            blkChoiceY === 1 &&\r\n            gridLocX === 0 &&\r\n            gridLocY === gridSizeY - 1\r\n          ? 3\r\n          : blkChoiceX === 2 &&\r\n            blkChoiceY === 2 &&\r\n            gridLocX === 2 &&\r\n            gridLocY === 0\r\n          ? 4\r\n          : blkChoiceX === 2 &&\r\n            blkChoiceY === 2 &&\r\n            gridLocX === 0 &&\r\n            gridLocY === 1\r\n          ? 5\r\n          : blkChoiceX === 1 &&\r\n            blkChoiceY === 2 &&\r\n            gridLocX === gridSizeX - 2 &&\r\n            gridLocY === 2\r\n          ? 6\r\n          : blkChoiceX === 1 &&\r\n            blkChoiceY === 2 &&\r\n            gridLocX === gridSizeX - 1 &&\r\n            gridLocY === 0\r\n          ? 7\r\n          : pointAttribute;\r\n    } while (\r\n      !(\r\n        gridSizeX <= 12 &&\r\n        gridSizeY <= 12 &&\r\n        (gridSizeX < 12 || gridSizeY < 12)\r\n      )\r\n    );\r\n\r\n    return [gridSizeX, gridSizeY, gridLocX, gridLocY, pointAttribute];\r\n  }\r\n\r\n  function getPossibleNextPointOffsetType(x: number, y: number) {\r\n    const Grid6_6 = [\r\n      [\r\n        [4, 5],\r\n        [5, 6],\r\n        [4, 7],\r\n        [4, 7],\r\n        [5, 7],\r\n        [6, 7],\r\n      ],\r\n      [\r\n        [3, 4],\r\n        [3, 6],\r\n        [0, 3],\r\n        [3, 5],\r\n        [0, 6],\r\n        [0, 7],\r\n      ],\r\n      [\r\n        [2, 5],\r\n        [1, 4],\r\n        [0, 1],\r\n        [3, 4],\r\n        [2, 5],\r\n        [1, 6],\r\n      ],\r\n      [\r\n        [2, 5],\r\n        [5, 6],\r\n        [4, 7],\r\n        [0, 2],\r\n        [1, 5],\r\n        [0, 6],\r\n      ],\r\n      [\r\n        [3, 4],\r\n        [1, 4],\r\n        [4, 7],\r\n        [4, 7],\r\n        [0, 2],\r\n        [1, 7],\r\n      ],\r\n      [\r\n        [2, 3],\r\n        [1, 3],\r\n        [1, 0],\r\n        [3, 0],\r\n        [0, 2],\r\n        [0, 1],\r\n      ],\r\n    ];\r\n\r\n    let [\r\n      gridSizeX,\r\n      gridSizeY,\r\n      gridLocX,\r\n      gridLocY,\r\n      pointAttribute,\r\n    ] = getPointGridAttribute(x, y);\r\n\r\n    const shouldReverse = gridSizeX < gridSizeY;\r\n\r\n    if (shouldReverse) {\r\n      /* swap gridSizeX and gridSizeY */\r\n      let t = gridSizeX;\r\n      gridSizeX = gridSizeY;\r\n      gridSizeY = t;\r\n\r\n      /* swap gridSizeX and gridSizeY */\r\n      t = gridLocX;\r\n      gridLocX = gridLocY;\r\n      gridLocY = t;\r\n    }\r\n\r\n    const p = Grid6_6[gridLocY][gridLocX];\r\n    let next_a_offsetType: any = p[0];\r\n    let next_b_offsetType: any = p[1];\r\n\r\n    if (shouldReverse) {\r\n      next_a_offsetType = (9 - next_a_offsetType) % 8;\r\n      next_b_offsetType = (9 - next_b_offsetType) % 8;\r\n    }\r\n\r\n    if (pointAttribute !== 8) {\r\n      let pathOrigin = offsetTypeOriginArr[pointAttribute];\r\n      let pathSubstitute = offsetTypeSubstituteArr[pointAttribute];\r\n      if (next_a_offsetType === pathOrigin) {\r\n        next_a_offsetType = pathSubstitute;\r\n      } else if (next_b_offsetType === pathOrigin) {\r\n        next_b_offsetType = pathSubstitute;\r\n      } else {\r\n        console.log(\r\n          'pathOrigin must always be one of next_a_offsetType and next_b_offset',\r\n        );\r\n      }\r\n    }\r\n\r\n    return [\r\n      gridSizeX,\r\n      gridSizeY,\r\n      gridLocX,\r\n      gridLocY,\r\n      pointAttribute,\r\n      p,\r\n      next_a_offsetType,\r\n      next_b_offsetType,\r\n    ];\r\n  }\r\n\r\n  function getPossibleNextPoint(x: number, y: number) {\r\n    let [\r\n      gridSizeX,\r\n      gridSizeY,\r\n      gridLocX,\r\n      gridLocY,\r\n      pointAttribute,\r\n      p,\r\n      next_a_offsetType,\r\n      next_b_offsetType,\r\n    ] = getPossibleNextPointOffsetType(x, y);\r\n\r\n    let p_a = offsetDirArr[next_a_offsetType];\r\n    let p_b = offsetDirArr[next_b_offsetType];\r\n    let next_a_x_p = x + p_a[0];\r\n    let next_a_y_p = y + p_a[1];\r\n    let next_b_x_p = x + p_b[0];\r\n    let next_b_y_p = y + p_b[1];\r\n\r\n    return [p_b, next_a_x_p, next_a_y_p, next_b_x_p, next_b_y_p];\r\n  }\r\n  //\r\n\r\n  let nextX: any, nextY: any;\r\n\r\n  let [\r\n    p_b,\r\n    next_a_x_p,\r\n    next_a_y_p,\r\n    next_b_x_p,\r\n    next_b_y_p,\r\n  ] = getPossibleNextPoint(x, y);\r\n\r\n  if (next_a_x_p === lastX && next_a_y_p === lastY) {\r\n    nextX = next_b_x_p;\r\n    nextY = next_b_y_p;\r\n  } else if (next_b_x_p === lastX && next_b_y_p === lastY) {\r\n    nextX = next_a_x_p;\r\n    nextY = next_a_y_p;\r\n  } else {\r\n    console.log('Neither of the next pointers match the lastXY (getNextPoint');\r\n  }\r\n\r\n  console.log('\\n', 'lastX: ', lastX, 'lastY: ', lastY, '\\n');\r\n  console.log('\\n', 'nextX: ', nextX, 'nextY: ', nextY, '\\n');\r\n  return [nextX, nextY];\r\n}\r\n\r\nconst pointSerialize = (x: any, y: any) => x * 12 + y;\r\n\r\n// TODO: maybe unnecessary\r\nfunction getNextPointSerialize(\r\n  x: number,\r\n  y: number,\r\n  lastX: number,\r\n  lastY: number,\r\n) {\r\n  console.log(\r\n    '\\n',\r\n    'starting x: ',\r\n    x,\r\n    '\\n',\r\n    'starting y: ',\r\n    y,\r\n    '\\n',\r\n    'last x: ',\r\n    lastX,\r\n    '\\n',\r\n    'last y: ',\r\n    lastY,\r\n    '\\n',\r\n  );\r\n\r\n  let [nextX, nextY] = getNextPoint(x, y, lastX, lastY);\r\n  return pointSerialize(nextX, nextY);\r\n}\r\n\r\nconst divideandconquer = async (\r\n  board: any,\r\n  curmove: Array<number>,\r\n  lastmove: Array<number>,\r\n  updateBoard: any,\r\n  moveKnight: any,\r\n  updateCurmove: any,\r\n  updateLastmove: any,\r\n  iterate: any,\r\n  addMove: any,\r\n  reset: any\r\n) => {\r\n  let visited = true;\r\n  for (const row of board)\r\n    for (const square of row) if (square === 0) visited = false;\r\n  if (visited) return;\r\n\r\n  let curBoard: number[][] = [];\r\n\r\n  for (let i = 0; i < 12; i++) {\r\n    curBoard[i] = board[i].slice();\r\n  }\r\n  curBoard[curmove[0]][curmove[1]] = 1;\r\n\r\n  const nextmove = getNextPoint(\r\n    curmove[0],\r\n    curmove[1],\r\n    lastmove[0],\r\n    lastmove[1],\r\n  );\r\n  if (curBoard[lastmove[0]][lastmove[1]] === 0) {\r\n    curBoard[lastmove[0]][lastmove[1]] = 1;\r\n  }\r\n\r\n\r\n  if (curBoard[nextmove[0]] === undefined) {\r\n    alert('Failed to converge on a solution, Please try again!')\r\n    reset()\r\n    return\r\n  } else if (curBoard[nextmove[0]][nextmove[1]] === undefined) {\r\n    alert('Failed to converge on a solution, Please try again!')\r\n    reset()\r\n    return\r\n  }\r\n\r\n  actionQueue.enqueue(() => {\r\n    iterate();\r\n    moveKnight(nextmove);\r\n    updateBoard(curBoard);\r\n    updateCurmove(curmove);\r\n    updateLastmove(lastmove);\r\n    addMove(curmove.slice())\r\n  });\r\n\r\n  curBoard[nextmove[0]][nextmove[1]] = 1;\r\n\r\n  if (\r\n    divideandconquer(\r\n      curBoard,\r\n      nextmove,\r\n      curmove,\r\n      updateBoard,\r\n      moveKnight,\r\n      updateCurmove,\r\n      updateLastmove,\r\n      iterate,\r\n      addMove,\r\n      reset\r\n    )\r\n  )\r\n    return true;\r\n  else return false;\r\n};\r\n\r\nexport default divideandconquer;\r\n","import React from 'react';\r\n\r\nconst Square = props => {\r\n    return (\r\n        <div className={props.styling} key={props.serial}> </div>\r\n    )\r\n}\r\n\r\nexport default Square;","import actionQueue from '../queue/action-queue';\r\n\r\n/*   \r\n *   PLACEHOLDER ANIMATION FOR NEURAL NETWORK\r\n *    NEURAL NET IMPLEMENTATION COMING SOON! \r\n */\r\n\r\nconst warnsdorfAnime = (updateBoard: any, moveKnight: any) => {\r\n  actionQueue.clear();\r\n\r\n  const board = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n  const knight = [0, 0];\r\n\r\n  actionQueue.startQueueing(80);\r\n\r\n  for (let i = 1; i < 1000; i++) {\r\n    let visited = true;\r\n    for (const row of board) {\r\n      for (const square of row) {\r\n        if (square === 0) visited = false;\r\n      }\r\n    }\r\n    if (visited) break;\r\n    knight[0] = Math.floor(Math.random() * 12);\r\n    knight[1] = Math.floor(Math.random() * 12);\r\n\r\n    board[Math.floor(Math.random() * 12)][Math.floor(Math.random() * 12)] = 1;\r\n    board[Math.floor(Math.random() * 12)][Math.floor(Math.random() * 12)] = 1;\r\n    board[Math.floor(Math.random() * 12)][Math.floor(Math.random() * 12)] = 1;\r\n\r\n    let newBoard: number[][] = [[]];\r\n\r\n    for (let i = 0; i < 12; i++) {\r\n      newBoard[i] = board[i].slice();\r\n    }\r\n\r\n    let newKnight = knight.slice();\r\n\r\n    actionQueue.enqueue(() => {\r\n      updateBoard(newBoard);\r\n      moveKnight(newKnight);\r\n    });\r\n  }\r\n};\r\n\r\nexport default warnsdorfAnime;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n  iterate,\r\n  moveKnight,\r\n  updateBoard,\r\n  addMove,\r\n  updateCurmove,\r\n  updateLastmove,\r\n  runScript,\r\n  changeSpeed,\r\n  resetIterations,\r\n  resetMoves,\r\n  reset\r\n} from '../store/board';\r\nimport warnsdorf from '../algorithms/warnsdorf';\r\nimport divideandconquer from '../algorithms/divideandconquer';\r\nimport actionQueue from '../queue/action-queue';\r\nimport Square from './Square';\r\nimport warnsdorfAnime from '../algorithms/warnsdorf-anime';\r\n\r\n\r\nclass Board extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      speed: 80,\r\n      start: [[0, 0]],\r\n      curMove: [2, 0],\r\n      lastMove: [0, 1],\r\n    };\r\n\r\n    this.warnsdorf = warnsdorf.bind(this);\r\n    this.divideandconquer = divideandconquer.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    actionQueue.clearQueueInterval();\r\n    actionQueue.modulateSpeed(e.target.value);\r\n\r\n    this.props.changeSpeed(e.target.value);\r\n    this.setState({speed: e.target.value});\r\n\r\n    actionQueue.changeSpeed(e.target.value);\r\n  }\r\n\r\n  run(algo) {\r\n    actionQueue.clear();\r\n    this.props.resetIterations();\r\n    this.props.resetMoves();\r\n    let board = [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ];\r\n    const firstMove = [this.props.moves[this.props.moves.length-1]]\r\n\r\n    if (algo === 'warnsdorf') {\r\n      warnsdorf(\r\n        board,\r\n        firstMove,\r\n        this.props.updateBoard,\r\n        this.props.moveKnight,\r\n        this.props.addMove,\r\n        this.props.iterate,\r\n        this.props.updateCurmove,\r\n        this.props.updateLastmove\r\n      );\r\n    } else {\r\n      divideandconquer(\r\n        board,\r\n        this.props.curMove,\r\n        this.props.lastMove,\r\n        this.props.updateBoard,\r\n        this.props.moveKnight,\r\n        this.props.updateCurmove,\r\n        this.props.updateLastmove,\r\n        this.props.iterate,\r\n        this.props.addMove,\r\n        this.props.reset\r\n      );\r\n    }\r\n    actionQueue.startQueueing(this.props.speed);\r\n  }\r\n\r\n  renderSquare(i) {\r\n    let x = i % 12;\r\n    let y = Math.floor(i / 12);\r\n    let black = (x + y) % 2 === 1;\r\n    let knight;\r\n    let visited;\r\n    if (this.props.knight) {\r\n      knight = this.props.knight[0] === x && this.props.knight[1] === y;\r\n    }\r\n    if (this.props.board) {\r\n      visited = this.props.board[y][x] === 1;\r\n    }\r\n\r\n    return knight ? (\r\n      black ? (\r\n        <Square serial={i} styling=\"black square knight\" />\r\n      ) : (\r\n        <Square serial={i} styling=\"white square knight\" />\r\n      )\r\n    ) : black ? (\r\n      visited ? (\r\n        <Square serial={i} styling=\"black square visited\" />\r\n      ) : (\r\n        <Square serial={i} styling=\"black square\" />\r\n      )\r\n    ) : visited ? (\r\n      <Square serial={i} styling=\"white square visited\" />\r\n    ) : (\r\n      <Square serial={i} styling=\"white square\" />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let squares = [];\r\n\r\n    for (let i = 0; i < 144; i++) {\r\n      squares.push(this.renderSquare(i));\r\n    }\r\n    return (\r\n      <div id=\"main\">\r\n        <div id=\"img\"></div>\r\n        <div className=\"middle\">\r\n          <div id=\"title\">\r\n            <h1>Knight's Tour</h1>\r\n            <p>\r\n              By <a href=\"http://matthw.com\">Matthew Howe</a>\r\n            </p>\r\n          </div>\r\n          <div id=\"board\">{squares}</div>\r\n        </div>\r\n        <div id=\"buttons\">\r\n          <button onClick={() => this.run('warnsdorf')} id=\"b3\">\r\n            Warnsdorf's Rule\r\n          </button>\r\n          <button onClick={() => this.run()} id=\"b3\">\r\n            Divide and Conquer\r\n          </button>\r\n          <button\r\n            onClick={() =>\r\n              warnsdorfAnime(this.props.updateBoard, this.props.moveKnight)\r\n            }\r\n            id=\"b3\">\r\n            Neural Network Solution\r\n          </button>\r\n          <div />\r\n          <div>\r\n            <p className=\"speed-text\">Speed: {this.state.speed} ms</p>\r\n            <input\r\n              name=\"speed\"\r\n              onChange={e => {\r\n                this.handleChange(e);\r\n              }}\r\n              type=\"range\"\r\n              min=\"10\"\r\n              max=\"500\"\r\n              value={this.state.speed}\r\n              className=\"slider\"\r\n            />\r\n          </div>\r\n          <p className=\"iterations\">Iterations: {this.props.iterations}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = state => ({\r\n  lastMove: state.board.lastMove,\r\n  moves: state.board.moves,\r\n  curMove: state.board.curMove,\r\n  board: state.board.board,\r\n  knight: state.board.knight,\r\n  iterations: state.board.iterations,\r\n  speed: state.board.speed,\r\n});\r\n\r\nconst mapDispatch = dispatch => ({\r\n  moveKnight: knight => dispatch(moveKnight(knight)),\r\n  updateBoard: newBoard => dispatch(updateBoard(newBoard)),\r\n  runScript: () => dispatch(runScript()),\r\n  addMove: move => dispatch(addMove(move)),\r\n  updateCurmove: move => dispatch(updateCurmove(move)),\r\n  updateLastmove: move => dispatch(updateLastmove(move)),\r\n  changeSpeed: speed => dispatch(changeSpeed(speed)),\r\n  iterate: () => dispatch(iterate()),\r\n  resetIterations: () => dispatch(resetIterations()),\r\n  resetMoves: () => dispatch(resetMoves()),\r\n  reset: () => dispatch(reset())\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(Board);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div className='app'>\r\n      <div>\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: any, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: any, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport board from './board';\r\n\r\nconst reducer = combineReducers({board});\r\nconst middleware = composeWithDevTools(\r\n  applyMiddleware(createLogger({collapsed: true})),\r\n);\r\nconst store = createStore(reducer, middleware);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker.tsx';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}